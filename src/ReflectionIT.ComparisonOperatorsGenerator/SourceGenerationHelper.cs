namespace ReflectionIT.ComparisonOperatorsGenerator;

public static class SourceGenerationHelper {

    internal const string GeneratorName = "ReflectionIT.ComparisonOperatorsGenerator";

    internal static string ImplementComparisonOperators(TypeToGenerate classToGenerate) {
        ICsFileBuilder csFileBuilder = new CsFileBuilder();

        csFileBuilder.AddAutoGeneratedHeader(GeneratorName)
                     .AddPreprocessorDirectives()
                     .AddEmptyLine();

        bool hasNamespace = !string.IsNullOrEmpty(classToGenerate.Namespace);
        if (hasNamespace) {
            csFileBuilder.AddNamespace(classToGenerate.Namespace, true);
        }

        GenerateBaseImplementation(csFileBuilder, classToGenerate);

        if (hasNamespace) {
            csFileBuilder.EndNamespace();
        }

        return csFileBuilder.Build();
    }

    private static void GenerateBaseImplementation(ICsFileBuilder builder, TypeToGenerate typeToGenerate) {
        var type = typeToGenerate.IsValueType ? "struct " : "class ";
        type += typeToGenerate.Name;
        if (typeToGenerate.IsRecord) {
            type = $"record {type}";
        }

        if (typeToGenerate.ImplementIComparisonOperatorsInterface) {
            type += $" : global::System.Numerics.IComparisonOperators<{typeToGenerate.Name},{typeToGenerate.Name},bool> ";
        }

        builder.AddStatementAndStartBlock($"partial {type}")

               .AddGeneratedAttributes(GeneratorName)
               .AddXmlCommentLines(
                    """<summary>Compares two values to determine which is less.</summary>""",
                    """<param name="left">The value to compare with <paramref name="right" />.</param>""",
                    """<param name="right">The value to compare with <paramref name="left" />.</param>""",
                    """<returns><c>true</c> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <c>false</c>.</returns>"""
               )
               .AddStatements($"public static bool operator <({typeToGenerate.Name} left, {typeToGenerate.Name} right) => left.CompareTo(right) < 0;")
               .AddEmptyLine()
               .AddGeneratedAttributes(GeneratorName)
               .AddXmlCommentLines(
                    """<summary>Compares two values to determine which is less or equal.</summary>""",
                    """<param name="left">The value to compare with <paramref name="right" />.</param>""",
                    """<param name="right">The value to compare with <paramref name="left" />.</param>""",
                    """<returns><c>true</c> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>"""
               )
               .AddStatements($"public static bool operator <=({typeToGenerate.Name} left, {typeToGenerate.Name} right) => left.CompareTo(right) <= 0;")
               .AddEmptyLine()
               .AddGeneratedAttributes(GeneratorName)
               .AddXmlCommentLines(
                    """<summary>Compares two values to determine which is greater.</summary>""",
                    """<param name="left">The value to compare with <paramref name="right" />.</param>""",
                    """<param name="right">The value to compare with <paramref name="left" />.</param>""",
                    """<returns><c>true</c> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <c>false</c>.</returns>"""
               )
               .AddStatements($"public static bool operator >({typeToGenerate.Name} left, {typeToGenerate.Name} right) => left.CompareTo(right) > 0;")
               .AddEmptyLine()
               .AddGeneratedAttributes(GeneratorName)
               .AddXmlCommentLines(
                    """<summary>Compares two values to determine which is greater or equal.</summary>""",
                    """<param name="left">The value to compare with <paramref name="right" />.</param>""",
                    """<param name="right">The value to compare with <paramref name="left" />.</param>""",
                    """<returns><c>true</c> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <c>false</c>.</returns>"""
               )
               .AddStatements($"public static bool operator >=({typeToGenerate.Name} left, {typeToGenerate.Name} right) => left.CompareTo(right) >= 0;")
               .AddEmptyLine()
               .EndBlock()
               .AddEmptyLine();
    }


#pragma warning disable IDE1006 // Naming Styles
    private const string Header = """
        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by the ReflectionIT.ComparisonOperatorsGenerator source generator
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------

        #nullable enable
        """;
#pragma warning restore IDE1006 // Naming Styles

    public const string Attribute = Header + """

        #if COMPARISON_OPERATORS_GENERATOR_EMBED_ATTRIBUTES
        
        /// <summary>
        /// An attribute to indicate that comparison operators should be generated for the target class, struct or record
        /// <para>
        /// This only works if the <see cref="System.IComparable{T}"/> interface is implemented
        /// </para>
        /// </summary>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = false)]
        public class ComparisonOperatorsAttribute : Attribute {

            /// <summary>
            /// Gets or sets a value indicating whether the <see cref="System.Numerics.IComparisonOperators{TSelf,TOther,TResult}" /> interface should be implemented.
            /// </summary>
            public bool ImplementIComparisonOperatorsInterface { get; set; }
        }
        #endif
        """;

}